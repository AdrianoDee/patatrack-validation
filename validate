#! /bin/bash -e

# Script for testing one or more pull requests against a reference release and an intermediate development release
#
# Usage:
#   validate [PR ...]
#
# Note: this script relies on `visDQMUpload` and `visDQMUtils.py` being available in the same directory.
# If they are missing they are automatically downloaded from https://github.com/rovere/dqmgui/ .

# Local configuration - should go before the others
source local.sh

# CMSSW configuration
source cmssw.sh

# DQM configuration
source dqm.sh

# GitHub-related configuration
source github.sh

# Input samples configuration
source input.sh

# Validation scripts
source validate.sh

# Hash of this script and its configuration
SCRIPTHASH=$(cat $VALIDATION/*.sh ${BASH_SOURCE[0]} | sha1sum | cut -d' ' -f1)

# Create a temporay working directory
BASE=$(mktemp -d -p $PWD run.XXXXXXXXXX)
[ -d $BASE ] || exit 1
REPORT=$BASE/report.md

# save the original file descriptors, then redirect all output and errors to a log file
exec 3>&1 4>&2
exec &> $BASE/log

# main
echo > $REPORT

# upload the report to the last PR given on the command line
for ISSUE_NUMBER in "$@"; do true; done

# if we can edit the comment after posting it, create an empty comment as a starting point
COMMENT_ID=$(can_post_comment $ISSUE_NUMBER && $EDIT_COMMENT && upload_report $ISSUE_NUMBER) || true

# set up the reference release
report "## Validation summary"
setup_release "reference" CMSSW_11_0_0_pre11
report "Reference release [CMSSW_11_0_0_pre11](https://github.com/cms-sw/cmssw/tree/CMSSW_11_0_0_pre11) at $(< $BASE/reference/hash)"
build_matrix "reference" "$REFERENCE_WORKFLOW"
DIRECTORIES="reference"
upload_report $ISSUE_NUMBER $COMMENT_ID

# set up the current development branch
setup_development_release "development" CMSSW_11_0_0_pre11_Patatrack CMSSW_11_0_X_Patatrack $REPOSITORY
report "Development branch [CMSSW_11_0_X_Patatrack](https://github.com/$REPOSITORY/cmssw/tree/CMSSW_11_0_X_Patatrack) at $(< $BASE/development/hash)"
build_matrix "development" "$WORKFLOWS"
build_data_matrix "development" "$DATA_WORKFLOWS"
DIRECTORIES+=" development"
upload_report $ISSUE_NUMBER $COMMENT_ID

# set up the development branch plus the PR(s) to be tested
if [ "$*" ]; then
  clone_release "development" "testing"
  report "Testing PRs:"
  for PR in "$@"; do
    git cms-merge-topic "$REPOSITORY:$PR"
    echo $PR >> $BASE/testing/PRs
    report "  - #$PR at $(git rev-parse --short=12 "$REPOSITORY/refs/pull/$PR/head")"
  done
  git rev-parse --short=12 HEAD > ../hash
  USER_CXXFLAGS="-g -rdynamic" USER_CUDA_FLAGS="-g -lineinfo" scram b -j
  build_matrix "testing" "$WORKFLOWS"
  build_data_matrix "testing" "$DATA_WORKFLOWS"
  DIRECTORIES+=" testing"
fi
report
upload_report $ISSUE_NUMBER $COMMENT_ID

# compute a unique hash for this validation run
JOBID=$({ echo $SCRIPTHASH; cat $(apply_and_glob "$BASE/%/hash" $DIRECTORIES); } | sha1sum | cut -d' ' -f1)
echo $JOBID > $BASE/jobid

# download the benchmark scripts
git clone git@github.com:cms-patatrack/patatrack-scripts.git $BASE/patatrack-scripts
# change the color palette used to plot the throughpit scans to match the "development" and "testing" releases
sed -e'/kRed\|kBlue/d' -i $BASE/patatrack-scripts/plot_scan.py

# run the workflows
run_workflows_in_parallel $DIRECTORIES
upload_report $ISSUE_NUMBER $COMMENT_ID
# make validation plots
make_validation_plots $DIRECTORIES
upload_report $ISSUE_NUMBER $COMMENT_ID
# make throughput plots
make_throughput_plots $DIRECTORIES
upload_report $ISSUE_NUMBER $COMMENT_ID
# upload DQM plots to the GUI
#upload_dqm_plots $DIRECTORIES
#upload_report $ISSUE_NUMBER $COMMENT_ID
# upload nvprof profiles
upload_profiles $DIRECTORIES
upload_report $ISSUE_NUMBER $COMMENT_ID

# restore the original descriptors, close and upload the log files
exec 1>&3- 2>&4-
upload_log_files $DIRECTORIES

echo "This report can be found at $REPORT:"
echo
cat $REPORT

# post the report to GitHub
upload_final_report $ISSUE_NUMBER $COMMENT_ID

# suggest to upload the plots and reports
if ! hostname | grep -q '\.cern\.ch'; then
  echo "Please upload the plots and reports with:"
  echo "  rsync -arvzz $LOCAL_DIR/$JOBID lxplus.cern.ch:$UPLOAD_DIR/"
fi

# mark the validation as complete
touch "$LOCAL_DIR/$JOBID/done"
